Name: deploy-backend-pipeline
SchemaVersion: "1.0"

# Trigger nur bei √Ñnderungen im backend/ Ordner
Triggers:
  - Type: Push
    Branches:
      - main
    FileSets:
      - "backend/**"
      - ".codecatalyst/**"

Actions:
  BuildAndDeploy:
    Identifier: aws/build@v1
    
    Environment:
      Name: backend-build-env
      Connections:
        - Name: "851725596604"
          Role: CodeCatalystWorkflowDevelopmentRole-proov-backend
    
    Inputs:
      Sources:
        - WorkflowSource
    
    Configuration:
      Steps:
        - Run: |
            echo "=== CodeCatalyst Backend Deployment Pipeline ==="
            echo "Building and deploying backend to ECS..."
            
            # Environment Variables f√ºr AWS CLI
            export AWS_REGION="eu-central-1"
            export AWS_ACCOUNT_ID="851725596604"
            export ECR_REPO_BACKEND="backend"
            export ECS_CLUSTER="my-cluster"
            export ECS_SERVICE_BACKEND="backend-service-new"
            export TASKDEF_FAMILY_BACKEND="backend-task"
            
            # Generate unique image tag
            export IMAGE_TAG="$(date +%Y%m%d-%H%M%S)-${CODECATALYST_SOURCE_COMMIT_ID:0:8}"
            echo "IMAGE_TAG=$IMAGE_TAG"
            
            # Login to ECR
            echo "=== Logging into ECR ==="
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            
            # Build Docker image
            echo "=== Building Backend Docker Image ==="
            cd backend
            docker build -t $ECR_REPO_BACKEND:latest .
            docker tag $ECR_REPO_BACKEND:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG
            
            # Push to ECR
            echo "=== Pushing Image to ECR ==="
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG
            
            # Update Task Definition
            echo "=== Updating ECS Task Definition ==="
            cd ../backend/infrastructure
            cp ecs-taskdef-backend.json /tmp/taskdef-backend.json
            
            # Replace image URL in task definition
            jq --arg img "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG" \
               '.containerDefinitions[0].image = $img' \
               /tmp/taskdef-backend.json > /tmp/taskdef-backend-updated.json
            
            # Register new task definition
            NEW_TASKDEF=$(aws ecs register-task-definition --cli-input-json file:///tmp/taskdef-backend-updated.json --query 'taskDefinition.taskDefinitionArn' --output text)
            echo "New Task Definition: $NEW_TASKDEF"
            
            # Update ECS Service
            echo "=== Updating ECS Service ==="
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE_BACKEND \
              --task-definition $NEW_TASKDEF \
              --force-new-deployment
            
            # Wait for deployment to complete
            echo "=== Waiting for deployment to stabilize ==="
            aws ecs wait services-stable \
              --cluster $ECS_CLUSTER \
              --services $ECS_SERVICE_BACKEND \
              --cli-read-timeout 900 \
              --cli-connect-timeout 60
            
            # Verify deployment
            echo "=== Verifying deployment ==="
            RUNNING_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE_BACKEND --query 'services[0].runningCount' --output text)
            DESIRED_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE_BACKEND --query 'services[0].desiredCount' --output text)
            
            if [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" != "0" ]; then
              echo "‚úÖ Deployment successful! Running: $RUNNING_COUNT, Desired: $DESIRED_COUNT"
              
              # Test health endpoint
              echo "=== Testing API Health ==="
              sleep 30  # Give ALB time to register new tasks
              HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.proovid.de/health || echo "000")
              if [ "$HEALTH_STATUS" = "200" ]; then
                echo "‚úÖ API health check passed (HTTP $HEALTH_STATUS)"
              else
                echo "‚ö†Ô∏è  API health check failed (HTTP $HEALTH_STATUS)"
                exit 1
              fi
            else
              echo "‚ùå Deployment failed! Running: $RUNNING_COUNT, Desired: $DESIRED_COUNT"
              exit 1
            fi
            
            echo "üéâ Backend deployment completed successfully!"

    Outputs:
      Artifacts:
        - Name: build-logs
          Files:
            - "**/*"
